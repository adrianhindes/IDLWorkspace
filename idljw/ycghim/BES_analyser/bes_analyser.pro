;===================================================================================
;
; This program is a widget-based program to analyse the MAST 2D BES data.
;
;===================================================================================
;
; IDL codes are written with IDL Version 6.4.
; C codes for CUDA programming is based on using NVIDIA GTS250 GPU card
;   installed on fuslw022 machine.
;
;===================================================================================
;
; Calling procedure in IDL:
;
;   bes_analyser
;
;===================================================================================
;
; To run this code, following files of IDL and C must be available.
;
;   1) bes_analyser_param_check.pro
;      --> To check various parameters used by bes_analyser
;   2) bes_analyser_win_ctrl.pro
;      --> To control the subsequent windows that are created by bes_analyser
;   3) bes_analyser_event_ctrl.pro
;      --> To control events generated by various windows
;   4) bes_analyser_misc.pro
;      --> Contains some miscellaneous procedures and functions
;   5) client_controller.pro
;      --> Contains the communication controller between IDL and C
;   6) client_fcn.pro
;      --> Contains protocols of communication between IDL and C
;   7) bes_analyser_cuda_ctrl.pro
;      --> contains the codes that calls the functions in client_fcn.pro
;          i.e. these are wrap-up codes of client_fcn.pro
;   8) bes_analyser_read_data.pro
;      --> contains the codes that read the MAST data
;   9) bes_analyser_plot_ctrl.pro
;      --> contains the codes for plotting the data on the screen
;  10) bes_analyser_mouse_ctrl.pro
;      --> contanis the codes to control the events due to mouse motions
;  11) bes_analyser_result_data_ctrl.pro
;      --> contains the codes to contorl the result data
;  12) bes_analyser_stat_anal.pro
;      --> contains the codes to perform statistical analyses
;  13) bes_analyser_cp_shade_mod.pro
;      --> contains the cp_shade procedure modified by Young-chul Ghim.
;===================================================================================
;
; Writer: 
;   Young-chul Ghim(Kim)
;      Rudolf Peierls Centre for Theoretical Physics, University of Oxford, UK
;      EURATOM/CCFE Fusion Association, Culham Science Centre, UK
;
; Start date of the program:
;   13th. Apr. 2011
;
;===================================================================================
;
; Version History
;
;  v0.4
;     Start Date: 20-06-2011
;     End Date: 
;     Note: 
;         1. SVN Revision: r
;
;  v0.3
;     Start Date: 03-05-2011
;     End Date: 20-06-2011
;     Note:
;         1. SVN Revision: r49
;            Thus, to get v0.3, checkout (co) the code with revision number set to 49.
;         2. Now, the most important routines in <Density Analysis> and <Velocity Analysis> is finished.
;            <Density Analysis>
;               Spectrum, Coherency, Temporal Correlation, Spatio-Temporal Correlation
;            <Velocity Analysis>
;               Time evolutino, Spectrum
;
;
;  v0.2
;     Start Date: 21-04-2011
;     End Date: 03-05-2011
;     Note:
;         1. SVN Revision: r20
;            Thsu, to get v0.2, checkout (co) the code with revision number set to 20.
;         2. Now, the <Basic Analysis> part is finished except 'Flux Suface with BES positions' function.
;            So, v0.2 performs:
;                              1) time evolution of BES signal
;                              2) time evolution of RMS/DC levels of BES signal
;                              3) 2D animation of BES signal
;
;  v0.1
;     Start Date: 13-04-2011
;     End Date:   21-04-2011
;     Note:
;          1. SVN Revision: r9
;             Thus, to get v0.1, checkout (co) the code with revision number set to 9.
;          2. This is the start of the program.
;          3. This version contains the all the major functionalities for 'time selection plot' only.
;===================================================================================

@bes_analyser_param_check
@bes_analyser_win_ctrl
@bes_analyser_event_ctrl
@bes_analyser_misc
@bes_analyser_plot_ctrl
@bes_analyser_mouse_ctrl
@bes_analyser_cp_shade_mod


pro bes_analyser

  version = 0.4		;define the version of this program.

; check the version
  if bes_analyser_ver_check(version) ne 1 then begin
    print, 'Fatal error.  Exit the program!'
    return
  endif

; creating the widget
  window_title = 'MAST 2D BES Analyses Controller v' + string(version, format='(f0.1)')
  main_base = widget_base(/column, title = window_title, /tlb_kill_request_events, xsize = 1000, ysize = 910)
    base1 = widget_base(main_base, /row)
      base11 = widget_base(base1, /column)	
        base111 = widget_base(base11, /column)
          base1111 = widget_base(base111, /row)
            label1111 = widget_label(base1111, value = 'Shot Number:   ') 
            shot_number_text = widget_text(base1111, /editable, scr_xsize = 80, value = '')
            load_data_button = widget_button(base1111, value = 'Load', xsize = 50, ysize = 30)
          base1113 = widget_base(base111, /row)
            label1113 = widget_label(base1113, value = 'Neutron spike remover: ')
            spike_remover = 0.1
            spike_remover_text = widget_text(base1113, /editable, scr_xsize = 85, value = string(spike_remover, format='(f0.2)'))
          base1112 = widget_base(base111)
            time_sel_window_option_button = widget_button(base1112, value = 'Option for Time Selection Plot', $
                                                          ysize = 30, xsize = 230, xoffset = 5)
        base112 = widget_base(base11, /column, frame = 1)
          label112 = widget_label(base112, value = '<Basic Analysis>', /align_left)
          base1121 = widget_base(base112, /column, /exclusive)
            bes_time_evol_button = widget_button(base1121, value = 'Time evolution of BES Signal')
            bes_rms_dc_ratio_button = widget_button(base1121, value = 'Time evolution of BES RMS/DC Level')
            bes_movie_button = widget_button(base1121, value = '2D animation of BES Signal')
            bes_flux_pos_button = widget_button(base1121, value = 'Flux surface with BES positions')
            widget_control, bes_time_evol_button, /set_button
          base1122 = widget_base(base112)
            basic_anal_action_button = widget_button(base1122, value = 'Action', ysize = 30, xsize = 100, xoffset = 65)
        base113 = widget_base(base11, /column, frame = 1)
          label113 = widget_label(base113, value = '<Advanced Analysis for Density>', /align_left)
          base1131 = widget_base(base113, /column, /exclusive)
            dens_spectrum_button = widget_button(base1131, value = 'Spectrum')
            dens_coherency_button = widget_button(base1131, value = 'Coherency')
            dens_temporal_corr_button = widget_button(base1131, value = 'Temporal Correlation')
            dens_spatial_corr_button = widget_button(base1131, value = 'Spatial Correlation')
            dens_spatio_temp_corr_button = widget_button(base1131, value = 'Spatio-Temporal Correlation')
            dens_spatio_spatio_corr_button = widget_button(base1131, value = 'Spatio-Spatio Correlation')
            dens_bispec_button = widget_button(base1131, value = 'Bispectrum')
            dens_bicoherency_button = widget_button(base1131, value = 'Bicoherency')
            widget_control, dens_spectrum_button, /set_button
          base1132 = widget_base(base113)
            dens_advanced_anal_action_button = widget_button(base1132, value = 'Action', ysize = 30, xsize = 100, xoffset = 65)
        base114 = widget_base(base11, /column, frame = 1)
          label114 = widget_label(base114, value = '<Advanced Analysis for Velocity>', /align_left)
          base1141 = widget_base(base114, /column, /exclusive)
            vel_time_evol_button = widget_button(base1141, value = 'Time evolution of velocity')
            vel_spectrum_button = widget_button(base1141, value = 'Spectrum')
            vel_coherency_button = widget_button(base1141, value = 'Coherency')
            vel_temporal_corr_button = widget_button(base1141, value = 'Temporal Correlation')
            vel_spatial_corr_button = widget_button(base1141, value = 'Spatial Correlation')
            vel_spatio_temp_corr_button = widget_button(base1141, value = 'Spatio-Temporal Correlation')
            widget_control, vel_time_evol_button, /set_button
          base1142 = widget_base(base114)
            vel_advanced_anal_action_button = widget_button(base1142, value = 'Action', ysize = 30, xsize = 100, xoffset = 65)
      base12 = widget_base(base1, /column)	
        base121 = widget_base(base12, /column, frame = 1)
          label121 = widget_label(base121, /align_left, value = '<Plot for Time Selection> Note: ' + $
                                                                'y-axis (except BES Signal) is normalized by the scaling factors.')
          time_sel_draw = widget_draw(base121, xsize = 725, ysize = 200, /button_event, retain = 2)
          base1211 = widget_base(base121, /row)
            time_sel_label = widget_label(base1211, value = '          Select: Hold LEFT button,  Deselect: Press RIGHT button,  Pan: Hold MIDDLE button' + $
                                                            '          ')
            base12111 = widget_base(base1211, /column, /nonexclusive) 
              time_sel_zoom_button = widget_button(base12111, value = 'Click to Zoom')
        base122 = widget_base(base12, /column, frame = 1)
          base1221 = widget_base(base122, /row)
            base12211 = widget_base(base1221, /column)
              label12211 = widget_label(base12211, value = '<Results Plot>', /align_left)
              result_draw = widget_draw(base12211, xsize = 525, ysize = 440, /button_event, /wheel_event, retain = 2)
              result_draw_slider =  widget_slider(base12211, /suppress_value, /drag, xsize = 525, maximum = 99, minimum = 0)
            base12212 = widget_base(base1221, /column)
              label12212 = widget_label(base12212, value = '<Results Plot Info>', /align_left)
              result_info_text = widget_text(base12212, /scroll, /wrap, scr_ysize = 463, scr_xsize = 185)
          label122 = widget_label(base122, value = 'Zoom: Hold LEFT button,  Pan: Hold MIDDLE button,  Reset: Press RIGHT button,' + $
                                                   '  Time March: Scroll WHEEL')
          base1221 = widget_base(base122)
            base12211 = widget_base(base1221, /nonexclusive)
              show_time_indicator_button = widget_button(base12211, value = 'Show Time Line')
              widget_control, show_time_indicator_button, sensitive = 0
              widget_control, result_draw_slider, sensitive = 0
            make_inde_plot_button = widget_button(base1221, value = 'Create Independent Plot Window', $
                                                  ysize = 30, xsize = 250, xoffset = 475)
    base2 = widget_base(main_base)
      ctrl_CUDA_comm_line_button = widget_button(base2, value = 'Control the CUDA Communication Line', $
                                                 xsize = 230, ysize = 30, xoffset = 15)
      show_hide_IDL_msg_box_button = widget_button(base2, value = 'HIDE the IDL Message Box', $
                                                   xsize = 230, ysize = 30, xoffset = 15, yoffset = 35)
      exit_button = widget_button(base2, value = 'EXIT the Program', xsize = 400, ysize = 60, xoffset = 450)



  main_window = {main_base:main_base, $
                 shot_number_text:shot_number_text, $
                 spike_remover_text:spike_remover_text, $
                 load_data_button:load_data_button, $
                 time_sel_window_option_button:time_sel_window_option_button, $
                 bes_time_evol_button:bes_time_evol_button, $
                 bes_rms_dc_ratio_button:bes_rms_dc_ratio_button, $
                 bes_movie_button:bes_movie_button, $
                 bes_flux_pos_button:bes_flux_pos_button, $
                 basic_anal_action_button:basic_anal_action_button, $
                 dens_spectrum_button:dens_spectrum_button, $
                 dens_coherency_button:dens_coherency_button, $
                 dens_temporal_corr_button:dens_temporal_corr_button, $
                 dens_spatial_corr_button:dens_spatial_corr_button, $
                 dens_spatio_temp_corr_button:dens_spatio_temp_corr_button, $
                 dens_spatio_spatio_corr_button:dens_spatio_spatio_corr_button, $
                 dens_bispec_button:dens_bispec_button, $
                 dens_bicoherency_button:dens_bicoherency_button, $
                 dens_advanced_anal_action_button:dens_advanced_anal_action_button, $
                 vel_time_evol_button:vel_time_evol_button, $
                 vel_spectrum_button:vel_spectrum_button, $
                 vel_coherency_button:vel_coherency_button, $
                 vel_temporal_corr_button:vel_temporal_corr_button, $
                 vel_spatial_corr_button:vel_spatial_corr_button, $
                 vel_spatio_temp_corr_button:vel_spatio_temp_corr_button, $
                 vel_advanced_anal_action_button:vel_advanced_anal_action_button, $
                 time_sel_draw:time_sel_draw, $
                 time_sel_label:time_sel_label, $
                 time_sel_zoom_button:time_sel_zoom_button, $
                 result_draw:result_draw, $
                 result_draw_slider:result_draw_slider, $
                 result_info_text:result_info_text, $
                 show_time_indicator_button:show_time_indicator_button, $
                 make_inde_plot_button:make_inde_plot_button, $
                 ctrl_CUDA_comm_line_button:ctrl_CUDA_comm_line_button, $
                 show_hide_IDL_msg_box_button:show_hide_IDL_msg_box_button, $
                 exit_button:exit_button}

  IDL_msg_box_window = {IDL_msg_box_window_base:0l, $
                        msg_text:0l, $
                        close_button:0l}

  CUDA_comm_window = {CUDA_comm_window_base:0l, $
                      conf_file_text:0l, $
                      sts_file_text:0l, $
                      open_comm_button:0l, $
                      close_comm_button:0l, $
                      close_button:0l}

  time_sel_window = {time_sel_window_base:0l, $
                     freq_filter_low_text:0l, $
                     freq_filter_high_text:0l, $
                     BES_Ch_button:lonarr(32), $
                     POL_Ch_button:lonarr(4), $
                     RAD_Ch_button:lonarr(8), $
                     plasma_current_button:0l, $
                     plasma_current_scale_text:0l, $
                     plasma_density_button:0l, $
                     plasma_density_scale_text:0l, $
                     SS_beam_button:0l, $
                     SS_beam_scale_text:0l, $
                     dalpha_button:0l, $
                     dalpha_scale_text:0l, $
                     plot_button:0l, $
                     filename_text:0l, $
                     save_button:0l, $
                     load_button:0l, $
                     close_button:0l}

  BES_data = {shot:0l, $
              APD_bias:0.0, $
              viewRadius:0.0, $		;Radial position of the centre of the whole APD camera array
              dt:0.0, $
              ptr_time:ptr_new(), $
              ptr_data:ptrarr(32), $
              loaded_ch:intarr(32), $
              synthetic_data:0}		;0 --> Real (i.e. experimental BES data)
                                        ;1 --> Synthetic Data from bloby turbulence generator
                                        ;2 --> Synthetic Data from ORB5
                                        ;3 --> Synthetic Data from GS2

  plasma_current_data = {shot:0l, $
                         ptr_time:ptr_new(), $
                         ptr_data:ptr_new(), $
                         loaded:0}

  plasma_density_data = {shot:0l, $
                         ptr_time:ptr_new(), $
                         ptr_data:ptr_new(), $
                         loaded:0}

  SS_beam_data = {shot:0l, $
                  ptr_time:ptr_new(), $
                  ptr_data:ptr_new(), $
                  loaded:0}

  dalpha_data = {shot:0l, $
                 ptr_time:ptr_new(), $
                 ptr_data:ptr_new(), $
                 loaded:0}

  main_window_data = {IDL_msg_box_window_ON:1, $
                      basic_anal_option_window_ON:0, $
                      dens_adv_option_window_ON:0, $
                      vel_adv_option_window_ON:0, $
                      BES_data:BES_data, $
                      plasma_current_data:plasma_current_data, $
                      plasma_density_data:plasma_density_data, $
                      SS_beam_data:SS_beam_data, $
                      dalpha_data:dalpha_data, $
                      slider_pos_time:!values.f_nan, $
                      timeline_indicator_ON:0, $
                      spike_remover:spike_remover}

  CUDA_comm_window_data = {conf_file:'comm.cnf', $
                           sts_file:'comm.sts', $
                           comm_line_on:0}

  BES_ch_sel = intarr(32)
  BES_RAD_ch_sel = intarr(8)
  BES_POL_ch_sel = intarr(4)
  BES_ch_sel[12] = 1

  time_sel_window_data = {freq_filter_low:0.0, $	;in [kHz]
                          freq_filter_high:50.0, $	;in [kHz]
                          BES_ch_sel:BES_ch_sel, $
                          BES_RAD_ch_sel:BES_RAD_ch_sel, $
                          BES_POL_ch_sel:BES_POL_ch_sel, $
                          plasma_current_sel:1, $
                          plasma_density_sel:1, $
                          SS_beam_sel:1, $
                          dalpha_sel:1, $
                          plasma_current_scale:1.0, $
                          plasma_density_scale:1.0e20, $
                          SS_beam_scale:2.5, $
                          dalpha_scale:1.0e19, $
                          loaded_time_file:''}

  bes_time_evol_window_data = {freq_filter_low:0.0, $	;in [kHz]
                               freq_filter_high:50.0, $	;in [kHz]
                               BES_ch_sel:BES_ch_sel, $
                               BES_RAD_ch_sel:BES_RAD_ch_sel, $
                               BES_POL_ch_sel:BES_POL_ch_sel}

  rms_dc_time_evol_window_data = {avg_nt:1000l, $
                                  use_LPF_for_DC:0, $
                                  DC_freq_filter_high:10.0, $	;in [kHz]
                                  RMS_freq_filter_low:0.0, $	;in [kHz]
                                  RMS_freq_filter_high:200.0, $	;in [kHz]
                                  subtract_DC:1, $
                                  BES_ch_sel:BES_ch_sel, $
                                  BES_RAD_ch_sel:BES_RAD_ch_sel, $
                                  BES_POL_ch_sel:BES_POL_ch_sel}

  bes_animation_window_data = {factor_inc_spa_pts:10, $
                               freq_filter_low:0.0, $		;in [kHz]
                               freq_filter_high:200.0, $	;in [kHz]
                               avg_nt:1000l, $
                               by_time_avg_for_DC:1, $
                               by_LPF_for_DC:0, $
                               DC_freq_filter_high:10.0, $	;in [kHz]
                               inx_play_type:2, $
                               normalize:1, $
                               norm_by_own_ch:1, $
                               norm_by_all_ch:0, $
                               inx_ctable:6, $ ;color table strings are loaded by 'loadct, get_names = ctable_str'
                               inv_ctable:1, $
                               show_BES_pos:1, $
                               col_BES_pos_str:'black'}

  show_flux_surface_window_data = {time:0.1, $	;in [sec]
                                   contour_line_step:0.1, $
                                   show_label:1}

  dens_spec_window_data = {calc_in_IDL:0, $
                           calc_in_CUDA:1, $
                           BES_ch_sel1:BES_ch_sel, $
                           BES_ch_sel2:BES_ch_sel, $
                           freq_filter_low:0.0, $	;in [kHz]
                           freq_filter_high:1000.0, $	;in [kHz]
                           calc_spectrum:1, $
                           calc_spectrogram:0, $
                           calc_power:1, $
                           calc_phase:0, $
                           num_pts_per_subwindow:long(1024), $
                           num_bins_to_average:long(10), $
                           frac_overlap_subwindow:0.5, $
                           norm_by_DC:0, $
                           use_hanning_window:1, $
                           remove_large_structure:0}

  dens_coh_window_data =  {calc_in_IDL:0, $
                           calc_in_CUDA:1, $
                           BES_ch_sel1:BES_ch_sel, $
                           BES_ch_sel2:BES_ch_sel, $
                           freq_filter_low:0.0, $	;in [kHz]
                           freq_filter_high:1000.0, $	;in [kHz]
                           calc_spectrum:1, $
                           calc_spectrogram:0, $
                           calc_power:1, $
                           calc_phase:0, $
                           num_pts_per_subwindow:long(1024), $
                           num_bins_to_average:long(10), $
                           frac_overlap_subwindow:0.5, $
                           use_hanning_window:1, $
                           remove_large_structure:0}

  dens_temp_corr_window_data = {calc_in_IDL:0, $
                                calc_in_CUDA:1, $
                                BES_ch_sel1:BES_ch_sel, $
                                BES_ch_sel2:BES_ch_sel, $
                                freq_filter_low:0.0, $		;in [kHz]
                                freq_filter_high:1000.0, $	;in [kHz]
                                time_delay_low:-50.0, $		;time delay in [micro-seconds]
                                time_delay_high:50.0, $		;time delay in [micro-seconds]
                                num_bins_to_average:long(10), $
                                calc_covariance:0, $
                                calc_correlation:1, $
                                calc_fcn_tau_time:0, $
                                calc_fcn_tau:1, $
                                frac_overlap_subwindow:0.0, $
                                use_hanning_window:0, $
                                remove_large_structure:0, $
                                num_pts_to_remove_ph_peak:long(0), $
                                show_filter_response:0, $
                                show_envelope:0}

  spa_temp_corr_BES_ch_sel = BES_ch_sel
  spa_temp_corr_BES_ch_sel[4] = 1
  spa_temp_corr_BES_ch_sel[12] = 1
  spa_temp_corr_BES_ch_sel[20] = 1
  spa_temp_corr_BES_ch_sel[28] = 1
  spa_temp_corr_RAD_ch_sel = BES_RAD_ch_sel
  spa_temp_corr_RAD_ch_sel[4] = 1
  dens_spa_temp_corr_window_data = {calc_in_IDL:0, $
                                    calc_in_CUDA:1, $
                                    calc_pol_spa:1, $
                                    calc_rad_spa:0, $
                                    BES_ch_sel:spa_temp_corr_BES_ch_sel, $
                                    BES_RAD_ch_sel:spa_temp_corr_RAD_ch_sel, $
                                    BES_POL_ch_sel:BES_POL_ch_sel, $
                                    freq_filter_low:0.0, $	;in [kHz]
                                    freq_filter_high:1000.0, $	;in [kHz]
                                    time_delay_low:-50.0, $	;in [micro-seconds]
                                    time_delay_high:50.0, $	;in [micro-seconds]
                                    num_bins_to_average:long(10), $
                                    calc_covariance:0, $
                                    calc_correlation:1, $
                                    calc_fcn_time:0, $
                                    frac_overlap_subwindow:0.0, $
                                    use_hanning_window:0, $
                                    remove_large_structure:0, $
                                    factor_inc_spa_pts:10, $
                                    convert_temp_to_spa:0, $
                                    use_cxrs_data:1, $
                                    use_ss_cxrs:1, $
                                    manual_vtor:50.0}		;toroidal velcotiy in [km/s]

  dens_spa_spa_corr_window_data = {calc_in_IDL:0, $
                                   calc_in_CUDA:1, $
                                   calc_spa_avg_NO:0, $
                                   calc_spa_avg_YES:1, $
                                   BES_ch_sel:BES_ch_sel, $
                                   freq_filter_low:0.0, $	;in [kHz]
                                   freq_filter_high:1000.0, $	;in [kHz]
                                   time_delay_low:-50.0, $	;in [micro-seconds]
                                   time_delay_high:50.0, $	;in [micro-seconds]
                                   calc_covariance:0, $
                                   calc_correlation:1, $
                                   frac_overlap_subwindow:0.0, $
                                   use_hanning_window:0, $
                                   remove_large_structure:0}


  vel_time_evol_window_data = {calc_in_IDL:0, $
                               calc_in_CUDA:1, $
                               calc_pol_vel:1, $
                               calc_rad_vel:0, $
                               BES_ch_sel:spa_temp_corr_BES_ch_sel, $
                               BES_RAD_ch_sel:spa_temp_corr_RAD_ch_sel, $
                               BES_POL_ch_sel:BES_POL_ch_sel, $
                               freq_filter_low:0.0, $		;in [kHz]
                               freq_filter_high:1000.0, $	;in [kHz]
                               time_delay_low:-30.0, $		;in [micro-seconds]
                               time_delay_high:30.0, $		;in [micro-seconds]
                               num_bins_to_average:long(300), $
                               frac_overlap_subwindow:0.0, $
                               use_hanning_window:0, $
                               remove_large_structure:0, $
                               convert_to_tor_vel:0, $
                               compare_cxrs_ss:0, $
                               compare_cxrs_sw:0, $
                               apply_median_filter:0, $
                               median_filter_width:long(3), $
                               apply_field_method:1, $
                               num_time_pts_field_method:long(50), $
                               allowed_mult_sd:3.0}

  vel_spec_window_data = {calc_in_IDL:0, $
                          calc_in_CUDA:1, $
                          calc_pol_vel:1, $
                          calc_rad_vel:0, $
                          BES_ch_sel1:spa_temp_corr_BES_ch_sel, $
                          BES_RAD_ch_sel1:spa_temp_corr_RAD_ch_sel, $
                          BES_POL_ch_sel1:BES_POL_ch_sel, $ 
                          BES_ch_sel2:spa_temp_corr_BES_ch_sel, $
                          BES_RAD_ch_sel2:spa_temp_corr_RAD_ch_sel, $
                          BES_POL_ch_sel2:BES_POL_ch_sel, $ 
                          freq_filter_low:0.0, $		;in [kHz]
                          freq_filter_high:1000.0, $		;in [kHz]
                          time_delay_low:-30.0, $		;in [micro-seconds]
                          time_delay_high:30.0, $		;in [micro-seconds]
                          num_bins_to_average_vt:long(2), $
                          frac_overlap_subwindow_vt:0.0, $
                          use_hanning_window_vt:0, $
                          remove_large_structure:0, $
                          apply_median_filter:0, $
                          median_filter_width:long(3), $
                          apply_field_method:1, $
                          num_time_pts_field_method:long(50), $
                          allowed_mult_sd:3.0, $
                          calc_spectrogram:0, $
                          calc_phase:0, $
                          num_pts_per_subwindow_vf:long(1024), $
                          num_bins_to_average_vf:long(10), $
                          frac_overlap_subwindow_vf:0.5, $
                          norm_by_DC:0, $
                          use_hanning_window_vf:1}

  id = {main_window:main_window, $
        IDL_msg_box_window:IDL_msg_box_window, $
        CUDA_comm_window:CUDA_comm_window, $
        time_sel_window:time_sel_window}

;define variable: COMMANDS from IDL
  COMM_QUIT	= long(100)	;To stop CUDA run
  COMM_TEST	= long(200)	;To check the IDL & CUDA communication line
  COMM_CHK_RATE = long(300)	;To check the data transfer rate between IDL & CUDA
  COMM_CUDA_FFT	= long(500)	;To calculate auto- and cross-spectrum
  COMM_CUDA_COH = long(510)	;To calculate coherency of the signal
  COMM_CUDA_CORR = long(600)	;To calculate correlation function

  CUDA_command = {QUIT:COMM_QUIT, $
                  TEST:COMM_TEST, $
                  CHK_RATE:COMM_CHK_RATE, $
                  CUDA_FFT:COMM_CUDA_FFT, $
                  CUDA_COH:COMM_CUDA_COH, $
                  CUDA_CORR:COMM_CUDA_CORR}

  pipes = create_struct(name = 'pipe_struct', 'unit_w', fix(-1), 'unit_r', fix(-1))

; define system variables for plots
  temp_sys_var = {p:!p, $
                  x:!x, $
                  y:!y, $
                  z:!z}

  sys_var = {org:temp_sys_var, $
             time_sel_plot:temp_sys_var, $
             result_plot:temp_sys_var}

; define mouse info
  mouse = {x0:0l, x1:0l, y0:0l, y1:0l, left_middle:0, graphic_mode:0, xy_direction:0}

; define time_select structure
  MAX_NUM_TIME_REGIONS = 50
  time_sel_struct = {MAX_NUM_TIME_REGIONS:MAX_NUM_TIME_REGIONS, $	;maximum allowed number of selected time regions
                     curr_num_time_regions:0, $				;current number of selected time regions
                     time_regions:fltarr(MAX_NUM_TIME_REGIONS, 2)}	;selected time range for each time region

; set the color table
  color_table_str = ['black', $
                     'crimson', $
                     'blue', $
                     'green', $
                     'darkcyan', $
                     'magenta', $
                     'orangered', $
                     'darkolivegreen', $
                     'indigo', $
                     'darkgoldenrod']

; set the main data structure: info.
  info = {version:version, $
          id:id, $
          main_window_data:main_window_data, $
          CUDA_comm_window_data:CUDA_comm_window_data,$
          time_sel_window_data:time_sel_window_data, $
          bes_time_evol_window_data:bes_time_evol_window_data, $
          rms_dc_time_evol_window_data:rms_dc_time_evol_window_data, $
          bes_animation_window_data:bes_animation_window_data, $
          show_flux_surface_window_data:show_flux_surface_window_data, $
          dens_spec_window_data:dens_spec_window_data, $
          dens_coh_window_data:dens_coh_window_data, $
          dens_temp_corr_window_data:dens_temp_corr_window_data, $
          dens_spa_temp_corr_window_data:dens_spa_temp_corr_window_data, $
          dens_spa_spa_corr_window_data:dens_spa_spa_corr_window_data, $
          vel_time_evol_window_data:vel_time_evol_window_data, $
          vel_spec_window_data:vel_spec_window_data, $
          CUDA_command:CUDA_command, $
          pipes:pipes, $
          sys_var:sys_var, $
          mouse:mouse, $
          time_sel_struct:time_sel_struct, $
          color_table_str:color_table_str}

; save the user value
  widget_control, main_base, set_uvalue = info

; create a user value for time_sel_draw
  MAX_NUM_PLOTS = 20	;At any given time, maximum number of plots on a window is set by MAX_NUM_PLOTS
  plotdata = {MAX_NUM_PLOTS:MAX_NUM_PLOTS, $
              curr_num_plots:0, $	;holds the current number of plots on the window
              ptr_x:ptrarr(MAX_NUM_PLOTS), $	;holds the x-axis data --> used for 2D, 3D and 4D data
              ptr_y:ptrarr(MAX_NUM_PLOTS), $	;holds the y-axis data --> used for 2D, 3D and 4D data
              ptr_yerr:ptrarr(2,MAX_NUM_PLOTS),$;holds the errobar for the y-axis data, [0, *]-->upper err bar, [1,*]-->lower err bar
              ptr_z:ptrarr(MAX_NUM_PLOTS), $	;holds the z-axis data --> used only for 3D or 4D data
              ptr_t:ptrarr(MAX_NUM_PLOTS), $	;holds the t-axis data --> used only for 4D data
              inx_curr_time:0l, $		;holds the current index of t-axis on the widnow --> used only for 4D data
              line_color:strarr(MAX_NUM_PLOTS), $;contains the color (string type) for the line
              line_style:intarr(MAX_NUM_PLOTS),	$;contanis the line-style
              inx_ctable:0, $			;contains the index of the color table for 3D or 4D data
              inv_ctable:0, $			;contains whether to invert the color table or not. use only for 3D or 4D data.
              xtitle:'', $
              ytitle:'', $
              ztitle:'', $
              title:'', $
              pre_title:'', $
              xlog:0, $
              ylog:0, $
              zlog:0, $ 
              shade_pos:[0.0, 0.0, 0.0, 0.0], $
              scale_pos:[0.0, 0.0, 0.0, 0.0], $
              type:0}				;plot type --> 0 if no data
						;	   --> 11   if 2D, x:time, y:volts (i.e. RAW BES signal time evolution)
						;	   --> 12   if 2D, x:time, y:normalized (i.e. no units like BES RMS/DC evolution)
                                                ;          --> 21   if 2D, x:frequency, y:power (i.e. power spectrum)
                                                ;          --> 22   if 2D, x:frequency, y:normalized power (i.e. coherency)
                                                ;          --> 23   if 2D, x:frequency, y:phase
						;          --> 24   if 2D, x:time-delay, y:correlation (normalized)
						;          --> 25   if 2D, x:time-delay, y:covariance
                                                ;          --> 26   if 2D, x:time, y:velocity
						;          --> 30   if 2D, x:frequency, y:power (linear scale) for velocity spectrum
						;          --> 31   if 2D, x:frequency, y:phase for velocity spectrum
						;	   --> 101  if 3D, x:time, y:frequency, z:power (i.e. power spectrogram)
                                                ;          --> 102  if 3D, x:time, y:frequency, z:normalized power
                                                ;          --> 103  if 3D, x:time, y:frequency, z:phase
						;          --> 104  if 3D, x:time, y:time-delay, z:correlation (normalized)
						;          --> 105  if 3D, x:time, y:time-delay, z:covariace
                                                ;          --> 106  if 3D, x:time-delay, y:space, z:correlation (spatio-temporal correlation)
                                                ;          --> 107  if 3D, x:time-delay, y:space, z:covariance (spatio-temporal covariance)
                                                ;          --> 108  if 3D, x:space, y:space, z:correlation (spatio-spatio correlation)
                                                ;          --> 109  if 3D, x:space, y:space, z:covariance (spatio-spatio covariance)
						;          --> 130  if 3D, x:time, y:freqeuency, z:power (linear scale) for velocity spectrum
						;          --> 131  if 3D, x:time, y:frequency, z:phase for velocity spectrum
						;	   --> 1001 if 4D, x:Radial Pos. y: Poloidal Pos. z: BES signal, t:time
                                                ;          --> 1006 if 4D, x:time-delay, y:space, z:correlation, t:time
                                                ;          --> 1007 if 4D, x:time-delay, y:space, z:covariance, t:time
                                                ;          --> 1008 if 4D, x:space, y:space, z:correlation, t:time
                                                ;          --> 1009 if 4D, x:space, y:space, z:covariance, t:time
                                                ;          --> 1010 if 4D, x:R [m], y: Z[m], z: flux, t:time
                                                ;          --> 1011 if 4D, x:del_R[cm], y:del_z[cm], z: spatio-spatio correlation, t:time
						;          --> 1012 if 4D, x:del_R[cm], y:del_z[cm], z: spatio-spatio covariance, t:time

; The reason I am saving plotdata is so that I can react zoom action fast.
  widget_control, info.id.main_window.time_sel_draw, set_uvalue = plotdata

; I also need to save plotdata structure for result_draw.
  widget_control, info.id.main_window.result_draw, set_uvalue = plotdata


; create IDL_msg_box_window
  create_IDL_msg_box_window, info

; create CUDA_comm_window
  create_CUDA_comm_window, info

; create time_sel_window
  create_time_sel_window, info

; realize the main window
  widget_control, main_base, /realize

; initialize the plot windows
  widget_control, info.id.main_window.time_sel_draw, get_value = wid
  info.sys_var.time_sel_plot = init_plot_window(wid, info.sys_var.org)

  widget_control, info.id.main_window.result_draw, get_value = wid
  info.sys_var.result_plot = init_plot_window(wid, info.sys_var.org)

; save the user value for updated sys_var
  widget_control, main_base, set_uvalue = info

; start the xmanager for the main window
  xmanager, 'bes_analyser', main_base, /no_block

; show the IDL_msg_box_window
  show_IDL_msg_box_window, info.id.IDL_msg_box_window

end