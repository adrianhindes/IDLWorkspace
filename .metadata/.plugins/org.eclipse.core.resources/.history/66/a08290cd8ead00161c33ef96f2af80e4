pro overplotResults

;Use radial avg function to overplot sets of data from experiments


domain=1 ;0 for angle, 1 if radial


if domain eq 1 then begin
  path = '~/Dropbox/ASC2Plots/Radial/'
endif else begin
  path='~/Dropbox/ASC2Plots/Degrees/'
endelse

cd,path

;field 400A
set1 = [7328,7408,7438,7468] ;3KW RF Hydrogen at 4.2mTorr pinch
set2 = [7498,7528,7558,7588] ;3KW RF Hydrogen at 2.1mTorr source
set3 = [7618,7648,7678,7708] ;3KW RF Hydrogen at 8.4mTorr pinch
set4 = [7760,7790,7820,7850] ;1KW RF Hydrogen at 4.1mTorr source
set5 = [7895,7925,7949,7979] ;10KW RF Hydrogen at 4.2mTorr pinch

;rectify to source -> pinch order
set1 = reverse(set1)
set3 = reverse(set3)
set5 = reverse(set5)

argonShot=[6826,6907]
argonz=['No Mode','Mode on']

title1 = '3KW RF Hydrogen at 4.2mTorr'
title2 = '3KW RF Hydrogen at 2.1mTorr'
title3 = '3KW RF Hydrogen at 8.4mTorr'
title4 = '1KW RF Hydrogen at 4.1mTorr
title5 = '10KW RF Hydrogen at 4.2mTorr'

argonTitle='Argon Mode Comparison'

labels = ['Z=1 (Source)','Z=2','Z=3 (Pinch)','Z=4'] ;5cm displacement each


titles = [title1,title2,title3,title4,title5]


;Begin Processing
;CHECK startShots and labels before running!
experiment = 5
startShots = argonShot ;<-- check number!
exTitle=argonTitle


;exTitle=titles[experiment-1]



checkDir = file_test(exTitle)
if checkDir eq 0 then begin
  file_mkdir,exTitle
endif

cd,exTitle

k = n_elements(startShots)

numPoints = dataPoints(shot=startShots[0])

;dataset Ordering: temp, density, vplasma, isat
;Series array = [dataSet,data,experiment]
series = dblarr(4,numPoints,k)


for i = 0, k-1 do begin
  print,'Begun processing Experiment',string(i+1)
  result = radialAvg(startShots[i],xdom=domain)
  xAxis = result.xaxis
  
  series[0,*,i] = result.temp
  series[1,*,i] = result.density
  series[2,*,i] = result.vplasma
  series[3,*,i] = result.isat
  
endfor

m=4 ; 4 data types temp, density, vplasma, isat

if domain eq 1 then begin
  xAxTitle='Radial Location from Plasma Centre (cm)'
endif else begin
  xAxTitle = 'Degrees'
endelse


yAxTitles=['Temperature','Density','Vplasma',' I-Sat']
yAxUnits=[' (eV)',' (m^-3)',' (V)',' (mA)']

;Set ranges
;This bit searches data for maximums, minimums, and calculates standard deviations to 
;calculate appropriate plotting ranges
stddevs = fltarr(m) ;stddev for each measurement type
wiggleRooms = fltarr(m) ;stddev for each experiment
maxPoints = fltarr(m) ; max val for each type
minPoints = fltarr(m) ; min val for each type
maxBuffer=maxPoints
minBuffer=minPoints

for i = 0, m-1 do begin ;for each data type
  for a = 0, k-1 do begin ; for each experiment
    wiggleRooms[a] = stddev(series[i,*,a])
    maxBuffer[a] = max(series[i,*,a])
    minBuffer[a] = min(series[i,*,a])
  endfor
  stddevs[i] = max(wiggleRooms)
  maxPoints[i] = max(maxBuffer)
  minPoints[i] = min(minBuffer)
endfor

;Set ranges
minRange=minPoints-stddevs
maxRange=maxPoints+stddevs
minRange[0] = 0
minRange[1] = 0

;Plotting
device,decomp=0


colors=[1,2,3,4]



for j = 0, m-1 do begin
fileName= path+exTitle+'/fig'+yAxTitles[j]+'.eps'

mkfig,fileName,xsize=13,ysize=10,font_size=9

  plot,xAxis,series[j,*,0],psym=1,xtitle=xAxTitle,ytitle=yAxTitles[j]+yAxUnits[j],title=exTitle+' '+yAxTitles[j],$
  yrange=[minRange[j],maxRange[j]],thick=3,col=colors[0]
    for i = 1, k-1 do begin
      oplot,xAxis,series[j,*,i],psym=1,color=colors[i],thick=3
    endfor
  legend,labels,psym=1,colors=colors,/right_legend,charthick=3
  endfig

endfor


end